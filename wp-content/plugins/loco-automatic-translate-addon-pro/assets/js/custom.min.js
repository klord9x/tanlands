! function(window, $) { var locoConf = window.locoConf,
        allStrings = locoConf.conf.podata;
    allStrings.shift(); var ajaxUrl = extradata.ajax_url,
        nonces = extradata.nonce,
        locale = locoConf.conf.locale,
        projectId = "";
    projectId = null != locoConf.conf.project ? locoConf.conf.project.domain + "-" + locale.lang + "_" + locale.region : "temp-" + locale.lang + "_" + locale.region; var rpl = { '"% s"': '"%s"', '"% d"': '"%d"', '"% S"': '"%s"', '"% D"': '"%d"', "% s": " %s ", "% S": " %s ", "% d": " %d ", "% D": " %d ", "٪ s": " %s ", "٪ S": " %s ", "٪ d": " %d ", "٪ D": " %d ", "٪ س": " %s " };

    function newaddAutoTranslationBtn() { $("#loco-editor nav").find("#cool-auto-translate-btn").length > 0 && $("#loco-editor nav").find("#cool-auto-translate-btn").remove(); const locoActions = $("#loco-editor nav").find("#loco-actions"),
            otherBtn = '<button class="button has-icon icon-warn" id="atlt_reset_all">Reset Translations</button></fieldset>',
            allTranslated = '<fieldset><button id="cool-auto-translate-btn" class="button has-icon icon-translate" disabled>Translated</button></fieldset>',
            proActiveBtn = '<fieldset><button id="cool-auto-translate-btn" class="button has-icon icon-translate">Auto Translate</button></fieldset>';
        locoActions.append(proActiveBtn) }

    function openPopup() { $("#atlt-dialog").dialog({ resizable: !1, height: "auto", width: 400, modal: !0, buttons: { Cancel: function() { $(this).dialog("close") } } }) }
    newaddAutoTranslationBtn(), settingsModel(), createStringsPopup(), create_G_popup(), create_deepl_popup(), $("#cool-auto-translate-btn").on("click", (function() { openPopup() })); var encodeHtmlEntity = function(str) { for (var buf = [], i = str.length - 1; i >= 0; i--) buf.unshift(["&#", str[i].charCodeAt(), ";"].join("")); return buf.join("") };

    function printStringsInPopup(jsonObj, type) { var html = "",
            totalTChars = 0,
            index = 1; if (jsonObj) { for (const key in jsonObj)
                if (jsonObj.hasOwnProperty(key)) { const element = jsonObj[key]; if ("" != element.source) { if ("google" == type || "yandex" == type) html += '<tr id="' + key + '" ><td>' + index + '</td><td  class="notranslate source">' + encodeHtmlEntity(element.source) + "</td>";
                        else { if (key > 2500) break;
                            html += '<tr id="' + key + '" ><td>' + index + '</td><td  class="notranslate source">' + encodeHtmlEntity(element.source) + "</td>" }
                        html += "google" == type ? '<td class="target translate">' + element.source + "</td></tr>" : "yandex" == type ? '<td translate="yes" class="target translate">' + element.source + "</td></tr>" : '<td class="target translate"></td></tr>', index++, totalTChars += element.source.length } }
                "google" == type ? $(".gtstats").each((function() { $(this).find(".totalChars").html(totalTChars) })) : "yandex" == type ? $(".ytstats").each((function() { $(this).find(".totalChars").html(totalTChars) })) : $(".dtstats").each((function() { $(this).find(".totalChars").html(totalTChars) })) } "google" == type ? $("#string_tbl").html(html) : "yandex" == type ? $("#yandex_string_tbl").html(html) : $("#deepl_string_tbl").html(html) }

    function saveTranslatedStrings(translatedObj, projectId) { if (void 0 !== translatedObj && translatedObj.length)
            if (translatedObj.length < 5e3 && translatedObj.length >= 2500) { var firstPart = translatedObj.slice(0, 2500),
                    secondPart = translatedObj.slice(2500);
                sendRequest(firstPart, projectId, part = "first"), sendRequest(secondPart, projectId, part = "second") } else if (translatedObj.length >= 5e3) { var firstPart = translatedObj.slice(0, 2500),
                secondPart = translatedObj.slice(2500, 5e3),
                thirdpart = translatedObj.slice(5e3);
            sendRequest(firstPart, projectId, part = "first"), sendRequest(secondPart, projectId, part = "second"), sendRequest(thirdpart, projectId, part = "third") } else sendRequest(translatedObj, projectId, part = "one") }

    function sendRequest(stringData, projectId, part) { var data = { action: "save_translations", data: JSON.stringify(stringData), part: part, "project-id": projectId };
        jQuery.post(ajaxUrl, data, (function(response) { $("#loco-editor nav").find("button").each((function(i, el) { var id; "auto" == el.getAttribute("data-loco") && $(el).trigger("click") })) })) } var translatedObj = [];
    $(".save_it").on("click", (function() { $("#stringTemplate tbody tr").each((function(index) { var target = $(this).find("td.target").text(),
                source = $(this).find("td.source").text(),
                improvedTarget = strtr(target, rpl);
            translatedObj.push({ source: source, target: improvedTarget }) })); var projectId = $(this).parents(".atlt_custom_model").find("#project_id").val();
        saveTranslatedStrings(translatedObj, projectId), $(".atlt_custom_model").fadeOut("slow"), $("html").addClass("merge-translations"); var checkModal = setInterval((function() { $(".loco-modal #loco-apis-batch").length && String($(".loco-modal").attr("style")).indexOf("none") <= -1 && ($("html").removeClass("merge-translations"), $("select#auto-api").hide(), $("#loco-apis-batch a.icon-help").hide(), $("#loco-apis-batch a.icon-group").hide(), $("#loco-apis-batch #loco-job-progress").hide(), $("select#auto-api option[value='loco_auto']").prop("selected", "selected"), $("select#auto-api").val($("select#auto-api option[value='loco_auto']").val()), $(".loco-modal .ui-dialog-titlebar .ui-dialog-title").html("Step 3 - Add Translations into Editor and Save"), $("#loco-apis-batch button.button-primary span").html("Start Adding Process"), $("#loco-apis-batch button.button-primary").on("click", (function() { $(this).find("span").html("Adding...") })), $(".loco-modal").addClass("addtranslations"), $(".noapiadded").remove(), $(".loco-modal #loco-apis-batch form").show(), $(".loco-modal #loco-apis-batch").removeClass("loco-alert"), clearInterval(checkModal)) }), 100) })), $(".loco-modal").removeClass("addtranslations"), $("button.icon-robot[data-loco='auto']").on("click", (function(e) { if ($(".loco-modal").removeClass("addtranslations"), void 0 !== e.originalEvent) var checkModal = setInterval((function() { if ($(".loco-modal #loco-apis-batch").length && String($(".loco-modal").attr("style")).indexOf("none") <= -1) { $(".loco-modal").removeClass("addtranslations"), $("select#auto-api").show(), $("#loco-apis-batch a.icon-help").show(), $("#loco-apis-batch a.icon-group").show(), $("#loco-apis-batch #loco-job-progress").show(), $(".loco-modal .ui-dialog-titlebar .ui-dialog-title").html("Auto-translate this file"), $("#loco-apis-batch button.button-primary span").html("Translate"); var opt = 0;
                $("select#auto-api option").each((function() { opt += 1 })), 1 == opt && ($(".noapiadded").remove(), $(".loco-modal #loco-apis-batch").removeClass("loco-alert"), $(".loco-modal #loco-apis-batch form").hide(), $(".loco-modal #loco-apis-batch").addClass("loco-alert"), $(".loco-modal .ui-dialog-titlebar .ui-dialog-title").html("No translation APIs configured"), $(".loco-modal #loco-apis-batch").append("<div class='noapiadded'><p>Add automatic translation services in the plugin settings.<br>or<br>Use <strong>Auto Translate</strong> addon button.</p><nav><a href='http://locotranslate.local/wp-admin/admin.php?page=loco-config&amp;action=apis' class='button button-link has-icon icon-cog'>Settings</a><a href='https://localise.biz/wordpress/plugin/manual/providers' class='button button-link has-icon icon-help' target='_blank'>Help</a><a href='https://localise.biz/wordpress/translation?l=de-DE' class='button button-link has-icon icon-group' target='_blank'>Need a human?</a></nav></div>")), clearInterval(checkModal) } }), 100) })); var yModal = document.getElementById("atlt_strings_model");
    window.onclick = function(event) { event.target == yModal && $("#atlt_strings_model").fadeOut("slow") }, $("#atlt_strings_model").find(".close").on("click", (function() { $("#atlt_strings_model").fadeOut("slow") })), $("#atlt_yandex_transate_btn").on("click", (function() { var defaultcode = locale.lang ? locale.lang : null,
            arr; switch (defaultcode) {
            case "bel":
                defaultlang = "be"; break;
            case "he":
                defaultlang = "iw"; break;
            case "snd":
                defaultlang = "sd"; break;
            case "jv":
                defaultlang = "jv"; break;
            case "nb":
            case "nn":
                defaultlang = "no"; break;
            default:
                defaultlang = defaultcode }
        $(".save_it").prop("disabled", !0), $(".ytstats").css("display", "none"), localStorage.setItem("lang", defaultlang), ["af", "jv", "am", "no", "ar", "az", "ba", "be", "bg", "bn", "bs", "ca", "ceb", "cs", "cy", "da", "de", "el", "en", "eo", "es", "et", "eu", "fa", "fi", "fr", "ga", "gd", "gl", "gu", "he", "hi", "hr", "ht", "hu", "hy", "id", "is", "it", "ja", "jv", "ka", "kk", "km", "kn", "ko", "ky", "la", "lb", "lo", "lt", "lv", "mg", "mhr", "mi", "mk", "ml", "mn", "mr", "mrj", "ms", "mt", "my", "ne", "nl", "no", "pa", "pap", "pl", "pt", "ro", "ru", "si", "sk", "sl", "sq", "sr", "su", "sv", "sw", "ta", "te", "tg", "th", "tl", "tr", "tt", "udm", "uk", "ur", "uz", "vi", "xh", "yi", "zhCN"].includes(defaultlang) || ($(".yandex-notice-container").addClass("notice inline notice-warning").html("Yandex Automatic Translator Does not support this language."), $(".choose-lang").hide(), $(".string_container").hide(), $(".save_it").hide(), $("#ytWidget").hide()); var plainStrArr = filterRawObject(allStrings, "plain");
        plainStrArr.length > 0 ? printStringsInPopup(plainStrArr, type = "yandex") : ($("#ytWidget").hide(), $(".yandex-notice-container").addClass("notice inline notice-warning").html("There is no plain string available for translations."), $(".choose-lang").hide(), $(".string_container").hide(), $(".save_it").hide()), $("#atlt-dialog").dialog("close"), $("#atlt_strings_model").addClass("yandex-translator").fadeIn("slow") })); var gModal = document.getElementById("atlt_gtranslate_model"),
        closeDeeplBtn;
    window.onclick = function(event) { event.target == gModal && (gModal.style.display = "none") }, $("#atlt_gtranslate_model").find(".close").on("click", (function() { $("#atlt_gtranslate_model").fadeOut("slow") })), $("#atlt_gtranslate_btn").on("click", (function() { var container = $("#atlt_gtranslate_model"),
            defaultcode = locale.lang ? locale.lang : null,
            arr; switch (defaultcode) {
            case "bel":
                defaultlang = "be"; break;
            case "he":
                defaultlang = "iw"; break;
            case "snd":
                defaultlang = "sd"; break;
            case "jv":
                defaultlang = "jw"; break;
            case "nb":
            case "nn":
                defaultlang = "no"; break;
            default:
                defaultlang = defaultcode }["en", "zh", "no", "sq", "am", "ar", "hy", "az", "eu", "be", "bn", "bs", "bg", "ca", "ceb", "ny", "zh-CN", "zh-TW", "co", "hr", "cs", "da", "nl", "eo", "et", "tl", "fi", "fr", "fy", "gl", "ka", "de", "el", "gu", "ht", "ha", "haw", "iw", "hi", "hmn", "hu", "is", "ig", "id", "ga", "it", "ja", "jw", "kn", "kk", "km", "rw", "ko", "ku", "ky", "lo", "la", "lv", "lt", "lb", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "or", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sm", "gd", "sr", "st", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tg", "ta", "tt", "te", "th", "tr", "tk", "uk", "ur", "ug", "uz", "vi", "cy", "xh", "yi", "yo", "zu"].includes(defaultlang) ? googleTranslateElementInit() : ($(".google-notice-container").addClass("notice inline notice-warning").html("Google Automatic Translator Does not support this language."), $(".choose-lang").hide(), container.find(".string_container").hide(), container.find(".save_it").hide()); var plainStrArr = filterRawObject(allStrings, "plain");
        plainStrArr.length > 0 ? printStringsInPopup(plainStrArr, type = "google") : ($(".google-notice-container").addClass("notice inline notice-warning").html("There is no plain string available for translations."), $(".choose-lang").hide(), container.find(".string_container").hide(), container.find(".save_it").hide()), $("#atlt-dialog").dialog("close"), $("#atlt_gtranslate_model").fadeIn("slow") })), $("#google_translate_element").change((function() { var container = $("#atlt_gtranslate_model");
        container.find(".string_container").scrollTop(0); var scrollHeight = container.find(".string_container").get(0).scrollHeight,
            scrollSpeed = 1e4;
        scrollHeight > scrollSpeed && (scrollSpeed = scrollHeight), void 0 !== scrollHeight && scrollHeight > 100 ? (container.find(".my_translate_progress").fadeIn("slow"), setTimeout(() => { container.find(".string_container").animate({ scrollTop: scrollHeight + 2e3 }, 2 * scrollSpeed, "linear") }, 2e3), container.find(".string_container").on("scroll", (function() { $(this).scrollTop() + $(this).innerHeight() + 50 >= $(this)[0].scrollHeight && setTimeout(() => { container.find(".save_it").prop("disabled", !1), container.find(".gtstats").fadeIn("slow"), container.find(".my_translate_progress").fadeOut("slow"), container.find(".string_container").stop(), $("body").css("top", "0") }, 1500) })), container.find(".string_container").innerHeight() + 10 >= scrollHeight && setTimeout(() => { container.find(".save_it").prop("disabled", !1), container.find(".gtstats").fadeIn("slow"), container.find(".my_translate_progress").fadeOut("slow"), container.find(".string_container").stop(), $("body").css("top", "0") }, 1500)) : setTimeout(() => { container.find(".save_it").prop("disabled", !1), container.find(".gtstats").fadeIn("slow") }, 2e3) })), document.getElementsByClassName("close_deepl")[0].onclick = function() { $("#atlt_deepl_model").fadeOut("slow") }; var deeplTranslateBtn = document.getElementById("atlt_deepl_btn");

    function generate_doc_file(thisBtn) { var stringsTxt = "";
        $("#deepl_stringTemplate tbody tr").each((function(index) { var string = $(this).find("td.source").text();
            stringsTxt += "™" + string })); var columnTitles = stringsTxt.split(/\™/g),
            domainName = $(thisBtn).data("domain-name"); const doc = new docx.Document,
            tableRow = new docx.Table({ rows: columnTitles.map(title => new docx.TableRow({ children: [new docx.TableCell({ children: [new docx.Paragraph(title + " \n\n\t\n")] })] })) });
        doc.addSection({ children: [tableRow] }), docx.Packer.toBlob(doc).then(blob => { saveAs(blob, domainName + "-strings.docx"), $(thisBtn).prop("disabled", !0) }) }

    function matchRuleShort(str, rule) { var escapeRegex = str => str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1"); return new RegExp("^" + rule.split("*").map(escapeRegex).join(".*") + "$").test(str) }

    function upload_deepl_file(domainName, defaultcode, plainStrArr) { var filename = domainName + "-strings",
            fullPath = document.getElementById("deepl-open-file").value,
            res = defaultcode.toUpperCase(),
            valid_exte, valid_ext = (filename + " " + res + ".docx").toUpperCase();
        jsonObj = plainStrArr; var arrInputs = $("#deepl-open-file"),
            allowedFiles = [valid_ext],
            wild_char = domainName + "-strings * " + res + ".docx",
            wild_chars = domainName + "-strings " + res + " *" + ".docx".toUpperCase(),
            wild_char_ext = wild_char.toUpperCase(),
            wild_chars_ext = wild_chars.toUpperCase(); if (fullPath) { var startIndex = fullPath.indexOf("\\") >= 0 ? fullPath.lastIndexOf("\\") : fullPath.lastIndexOf("/"),
                filename; if (0 !== (filename = fullPath.substring(startIndex)).indexOf("\\") && 0 !== filename.indexOf("/") || (file = filename.substring(1), filename = file.toUpperCase()), !(matchRuleShort(filename, wild_char_ext) || matchRuleShort(filename, valid_ext) || matchRuleShort(filename, wild_chars_ext))) return lblError.innerHTML = "Please upload files having extensions: <b>" + allowedFiles.join(", ") + "</b> only.", !1; { lblError.innerHTML = ""; var input = document.getElementById("deepl-open-file"),
                    reader = new FileReader;

                function nullGetter(part, scopeManager) { return part.module ? (part.module, "") : "{" + part.value + "}" }
                reader.onload = function() { jQuery("#deepl_stringTemplate").hide(), jQuery("#deepl-transtmplt").show(); var zip = new JSZip(reader.result),
                        br = document.createElement("br"),
                        doc, text, arr, filtered = (new window.docxtemplater).loadZip(zip).getFullText().split(/\n\n\t\n/g).filter((function(el) { return " " != el })),
                        demo = "",
                        index = 1; for (const key in jsonObj)
                        if (jsonObj.hasOwnProperty(key)) { const element = jsonObj[key]; if ("" != element.source && null != filtered[key]) { if (key > 2500) break;
                                demo += '<tr id="' + key + '" ><td>' + index + '</td><td  class="notranslate source">' + element.source + "</td>", demo += '<td class="target"  id="output"> ' + filtered.slice(1)[key] + "</td></tr>" }
                            index++ }
                    jQuery("#deepbody").append(demo) }, reader.readAsBinaryString(input.files[0]), $(".deepl_save_it").prop("disabled", !1), $("#deepl-btn-tpload").prop("disabled", !0) } } }

    function filterRawObject(rawArray, filterType) { return filterdArr = [], filterdArr = rawArray.filter((item, index) => { if ("" !== item.source && void 0 !== item.source && (void 0 === item.target || "" == item.target)) return !ValidURL(item.source) && (!isHTML(item.source) && (!!isPlacehodersChars(item.source) || !isSpecialChars(item.source) && (!isEmoji(item.source) && !item.source.includes("#")))) }) }

    function ValidURL(str) { var pattern; return !!/(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/.test(str) }

    function isHTML(str) { var rgex; return void 0 !== str && /<(?=.*? .*?\/ ?>|br|hr|input|!--|wbr)[a-z]+.*?>|<([a-z]+).*?<\/\1>/i.test(str) }

    function isSpecialChars(str) { var rgex; return void 0 !== str && /[@^{}�|<>]/g.test(str) }

    function isEmoji(str) { var ranges = ["(?:[✀-➿]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[#-9]️?⃣|㊙|㊗|〽|〰|Ⓜ|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|🆎|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|🈚|🈯|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|‼|⁉|[▪-▫]|▶|◀|[◻-◾]|©|®|™|ℹ|🀄|[☀-⛿]|⬅|⬆|⬇|⬛|⬜|⭐|⭕|⌚|⌛|⌨|⏏|[⏩-⏳]|[⏸-⏺]|🃏|⤴|⤵|[←-⇿])"]; return !!str.match(ranges.join("|")) }

    function isAllowedChars(str) { var rgex; return void 0 !== str && /[!@#$%^&*(),?":|<>]/g.test(str) }

    function isPlacehodersChars(str) { var rgex; return void 0 !== str && /%s|%d|$/g.test(str) }

    function strtr(s, p, r) { return !!s && { 2: function() { for (var i in p) s = strtr(s, i, p[i]); return s }, 3: function() { return s.replace(RegExp(p, "g"), r) }, 0: function() {} }[arguments.length]() }

    function settingsModel() { let preloaderImg = extradata.preloader_path,
            ytPreviewImg, gtPreviewImg, dplPreviewImg, modelHTML = ` \n  \x3c!-- The Modal --\x3e\n  <div id="atlt-dialog" title="Step 1 - Select Translation Provider" style="display:none;">\n  <div class="atlt-settings">\n  \n  <strong class="atlt-heading" style="margin-bottom:10px;display:inline-block;">Translate Using Yandex Page Translate Widget</strong>\n  <div class="inputGroup">\n  <button id="atlt_yandex_transate_btn" class="notranslate button button-primary">Yandex Translate</button>\n  <br/><a href="https://translate.yandex.com/" target="_blank"><img style="margin-top: 5px;" src="${extradata.yt_preview}" alt="powered by Yandex Translate Widget"></a>\n  </div>\n  <hr/>\n\n  <strong class="atlt-heading" style="margin-bottom:10px;display:inline-block;">Translate Using Google Page Translate Widget</strong>\n  <div class="inputGroup">\n  <button id="atlt_gtranslate_btn" class="notranslate button button-primary">Google Translate</button>\n  <br/><a href="https://translate.google.com/" target="_blank"><img style="margin-top: 5px;" src="${extradata.gt_preview}" alt="powered by Google Translate Widget"></a>\n  </div>\n  <hr/>\n\n  <strong class="atlt-heading" style="margin-bottom:10px;display:inline-block;">Translate Using Deepl Doc Translator</strong>\n  <div class="inputGroup">\n  <button id="atlt_deepl_btn" class="notranslate button button-primary">Deepl Translate</button>\n  <br/><a href="https://www.deepl.com/en/translator" target="_blank"><img style="margin-top: 5px;" src="${extradata.dpl_preview}" alt="powered by DeepL Translate"></a>\n  </div>\n  <hr/>\n\n  <ul style="margin: 0;">\n  <li><span style="color:green">✔</span> Unlimited Translations</li>\n  <li><span style="color:green">✔</span> No API Key Required</li>\n  <li><span style="color:green">✔</span> Check Languages Support - <a href="https://yandex.com/support/translate/supported-langs.html" target="_blank">Yandex</a>, <a href="https://en.wikipedia.org/wiki/Google_Translate#Supported_languages" target="_blank">Google</a>, <a href="https://www.deepl.com/en/translator" target="_blank">DeepL</a></li>\n  </ul>\n\n  </div>\n  </div>\n`;
        $("body").append(modelHTML) }

    function createStringsPopup() { let modelHTML = ` \n    \x3c!-- The Modal --\x3e\n    <div id="atlt_strings_model" class="modal atlt_custom_model">\n        \x3c!-- Modal content --\x3e\n        <div class="modal-content">\n          <input type="hidden" id="project_id" value="${projectId}">\n          <div class="modal-header">\n            <span class="close ">&times;</span>\n            <h2 class="notranslate">Step 2 - Start Automatic Translation Process</h2>\n            <div class="save_btn_cont">\n            <button class="notranslate save_it button button-primary" disabled="true">Merge Translation</button>\n            </div>\n\n            <div style="display:none" class="ytstats hidden">\n              Wahooo! You have saved your valauble time via auto translating \n               <strong class="totalChars"> </strong> characters  using \n                <strong> \n                <a href="https://wordpress.org/support/plugin/automatic-translator-addon-for-loco-translate/reviews/#new-post" target="_new">\n                Loco Automatic Translate Addon</a>\n              </strong>     \n            </div>\n\n          </div>\n            <div class="notice inline notice-info is-dismissible">Plugin will not translate any strings with HTML or special characters because Yandex Translator currently\n             does not support HTML and special characters translations. \n            You can edit translated strings inside Loco Translate Editor after merging the translations. Only special chracters (%s, %d) fixed at the time of merging of the translations.</div>\n            <div class="notice inline notice-info is-dismissible">Machine translations are not 100% correct.\n             Please verify strings before using on production website.</div>\n          <div class="modal-body">\n            <div class="my_translate_progress">Automatic translation is in progress....<br/>It will take few minutes, enjoy ☕ coffee in this time!<br/><br/>Please do not leave this window or browser tab while translation is in progress...</div>\n            <h3 class="choose-lang">Choose language <span class="dashicons-before dashicons-translation"></span></h3>\n            <div id="ytWidget">..Loading</div>\n            <br/>\n            <div class="string_container">               \n                <table class="scrolldown" id="stringTemplate">\n                    <thead>\n                    <th class="notranslate">S.No</th>\n                    <th class="notranslate">Source Text</th>\n                    <th class="notranslate">Translation</th>\n                    </thead>\n                    <tbody id="yandex_string_tbl">\n                    </tbody>\n                </table>\n            </div>\n            <div class="yandex-notice-container"></div>\n\n          </div>\n      <div class="modal-footer">\n            <div class="save_btn_cont">\n            <button class="notranslate save_it button button-primary" disabled="true">Merge Translation</button>\n            </div>\n            <div style="display:none" class="ytstats">\n            Wahooo! You have saved your valauble time via auto translating \n               <strong class="totalChars"></strong> characters  using \n                <strong> \n                <a href="https://wordpress.org/support/plugin/automatic-translator-addon-for-loco-translate/reviews/#new-post" target="_new">\n                Loco Automatic Translate Addon</a>\n              </strong>     \n            </div>\n      </div>\n        </div>\n      </div>`;
        $("body").append(modelHTML) }

    function create_G_popup() { let modelHTML = ` \n    \x3c!-- The Modal --\x3e\n    <div id="atlt_gtranslate_model" class="modal atlt_custom_model">\n        \x3c!-- Modal content --\x3e\n        <div class="modal-content">\n        <input type="hidden" id="project_id" value="${projectId}">\n          <div class="modal-header">\n            <span class="close ">&times;</span>\n            <h2 class="notranslate">Step 2 - Start Automatic Translation Process</h2>\n            <div class="save_btn_cont">\n            <button class="notranslate save_it button button-primary" disabled="true">Merge Translation</button>\n            </div>\n            <div style="display:none" class="gtstats">\n            Wahooo! You have saved your valauble time via auto translating \n             <strong class="totalChars"> </strong> characters  using \n              <strong> \n              <a href="https://wordpress.org/support/plugin/automatic-translator-addon-for-loco-translate/reviews/#new-post" target="_new">\n              Loco Automatic Translate Addon</a>\n            </strong>     \n          </div>\n          </div>\n            <div class="notice inline notice-info is-dismissible">Plugin will not translate any strings with HTML or special characters because Google Translate currently does not support HTML and special characters translations. You can edit translated strings inside Loco Translate Editor after merging the translations. Only special chracters (%s, %d) fixed at the time of merging of the translations.</div>\n            <div class="notice inline notice-info is-dismissible">Machine translations are not 100% correct. Please verify strings before using on production website.</div>\n          <div class="modal-body">\n            <div class="my_translate_progress">Automatic translation is in progress....<br/>It will take few minutes, enjoy ☕ coffee in this time!<br/><br/>Please do not leave this window or browser tab while translation is in progress...</div>\n            <h3 class="choose-lang">Choose language <span class="dashicons-before dashicons-translation"></span></h3>\n            <div id="google_translate_element"></div>\n            <div class="string_container">               \n                <table class="scrolldown" id="stringTemplate">\n                    <thead>\n                    <th class="notranslate">S.No</th>\n                    <th class="notranslate">Source Text</th>\n                    <th class="notranslate">Translation</th>\n                    </thead>\n                    <tbody id="string_tbl">\n                    </tbody>\n                </table>\n            </div>\n            <div class="google-notice-container"></div>\n          </div>\n          <div class="modal-footer">\n            <div class="save_btn_cont">\n            <button class="notranslate save_it button button-primary" disabled="true">Merge Translation</button>\n            </div>\n            <div style="display:none" class="gtstats">\n            Wahooo! You have saved your valauble time via auto translating \n             <strong class="totalChars"> </strong> characters  using \n              <strong> \n              <a href="https://wordpress.org/support/plugin/automatic-translator-addon-for-loco-translate/reviews/#new-post" target="_new">\n              Loco Automatic Translate Addon</a>\n            </strong>     \n          </div>\n          </div>\n        </div>\n      </div>`;
        $("body").append(modelHTML) }

    function create_deepl_popup() { let modelHTML = ` \n    \x3c!-- The Modal --\x3e\n    <div id="atlt_deepl_model" class="modal atlt_custom_model">\n        \x3c!-- Modal content --\x3e\n        <div class="modal-content">\n        <input type="hidden" id="project_id" value="${projectId}">\n          <div class="modal-header">\n            <span class="close_deepl close">&times;</span>\n            <h2 class="notranslate">Step 2 - Start Automatic Translation Process</h2>\n            <div class="save_btn_cont">\n            <button class="notranslate deepl_save_it button button-primary" disabled="true">Merge Translation</button>\n            </div>\n            <div style="display:none" class="dtstats">\n            Wahooo! You have saved your valauble time via auto translating \n             <strong class="totalChars"> </strong> characters  using \n              <strong> \n              <a href="https://wordpress.org/support/plugin/automatic-translator-addon-for-loco-translate/reviews/#new-post" target="_new">\n              Loco Automatic Translate Addon</a>\n            </strong>     \n          </div>\n          </div>\n            <div class="notice inline notice-info is-dismissible">Plugin will not translate any strings with HTML or special characters. You can edit translated strings inside Loco Translate Editor after merging the translations. Only special chracters (%s, %d) fixed at the time of merging of the translations.</div>\n            <div class="notice inline notice-info is-dismissible">Machine translations are not 100% correct. Please verify strings before using on production website.</div>\n          <div class="modal-body">\n            <table class="deepl_steps">\n            <tr>\n            <td>\n              <h2>Step 1</h2>\n              <p>Download translatable docx file.</p>\n              <button  class="button button-primary" id="download_deepl_doc">Download Docx</button>\n            </td>\n            <td>\n              <h2>Step 2</h2>\n              <p>Visit <a href="https://www.deepl.com/translator" target="_blank">https://www.deepl.com/translator</a><br/>and upload downloaded file inside it<br/>for translations.</p>\n            </td>\n            </tr>\n            <tr>\n            <td>\n              <h2>Step 3</h2>\n              <p>Upload translated docx file here</p>\n              <input type="file" id="deepl-open-file">\n              <br />\n              <span id="lblError" style="color: red;"></span>\n              <br />\n            </td>\n            <td>\n              <h2>Step 4</h2>\n              <p>Click on "Upload Strings" & "Merge Translation" after this.</p>\n              <input type="submit" id="deepl-btn-tpload" value="Upload Strings" />\n            </td>\n            </tr>\n            </table>\n        \n            <div class="string_container">               \n                <table class="scrolldown" id="deepl_stringTemplate">\n                    <thead>\n                    <th class="notranslate">S.No</th>\n                    <th class="notranslate">Source Text</th>\n                    <th class="notranslate">Translation</th>\n                    </thead>\n                    <tbody id="deepl_string_tbl">\n                    </tbody>\n                </table>\n                <table  id="deepl-transtmplt">\n                <thead>\n                <th class="notranslate">S.No</th>\n                <th>Source Text</th>\n                <th >Target Text</th>\n                </thead>\n                <tbody id="deepbody">\n                </tbody>\n              </table>\n            </div>\n            <div class="deepl-notice-container"></div>\n          </div>\n          <div class="modal-footer">\n            <div class="save_btn_cont">\n            <button class="notranslate deepl_save_it button button-primary" disabled="true">Merge Translation</button>\n            </div>\n            <div style="display:none" class="dtstats">\n            Wahooo! You have saved your valauble time via auto translating \n             <strong class="totalChars"> </strong> characters  using \n              <strong> \n              <a href="https://wordpress.org/support/plugin/automatic-translator-addon-for-loco-translate/reviews/#new-post" target="_new">\n              Loco Automatic Translate Addon</a>\n            </strong>     \n          </div>  \n          </div>\n        </div>\n      </div>`;
        $("body").append(modelHTML) }
    jQuery("#deepl-transtmplt").hide(), deeplTranslateBtn.onclick = function() { var defaultcode = locale.lang ? locale.lang : null;
        console.log(defaultcode), defaultlang = defaultcode; var container = $("#atlt_deepl_model"),
            domainName = locoConf.conf.project.domain,
            arr; if (["en", "es", "fr", "it", "nl", "pl", "pt", "pt-br", "ru", "ja", "zh", "de", "ro", "lt", "lv", "bg", "cs", "da", "et", "fi", "el", "hu", "sk", "sl", "sv"].includes(defaultlang)) { var plainStrArr = filterRawObject(allStrings, "plain");
            plainStrArr.length > 0 ? ($("#download_deepl_doc").data("domain-name", domainName), printStringsInPopup(plainStrArr, type = "deepl")) : (container.find(".string_container").hide(), $(".deepl_save_it").hide(), $("#download_deepl_doc").hide(), $("#deepl-open-file").hide(), $("#deepl-btn-tpload").hide(), $("table.deepl_steps").hide(), $(".deepl-notice-container").addClass("notice inline notice-warning").html("There is no plain string available for translations"), $(".choose-lang").hide()), $("#atlt-dialog").dialog("close"), $("#atlt_deepl_model").fadeIn("slow") } else $(".deepl-notice-container").addClass("notice inline notice-warning").html("Deepl Translator does not support this language"), $(".choose-lang").hide(), container.find(".string_container").hide(), $(".deepl_save_it").hide(), $("#atlt-dialog").dialog("close"), $("#atlt_deepl_model").fadeIn("slow"), $("#download_deepl_doc").hide(), $("#deepl-open-file").hide(), $("#deepl-btn-tpload").hide(), $("table.deepl_steps").hide();
        jQuery("body").on("click", "#deepl-btn-tpload", (function(event) { upload_deepl_file(domainName, defaultcode, plainStrArr) })) }, $("#download_deepl_doc").on("click", (function() { generate_doc_file(this) })), $(".deepl_save_it").on("click", (function() { $("#deepl-transtmplt tbody tr").each((function(index) { var target, improvedTarget = strtr($(this).find("td.target").text(), rpl),
                source = $(this).find("td.source").text();
            translatedObj.push({ source: source, target: improvedTarget }) })); var projectId = $(this).parents(".atlt_custom_model").find("#project_id").val();
        saveTranslatedStrings(translatedObj, projectId), $(".atlt_custom_model").fadeOut("slow"), $("html").addClass("merge-translations"); var checkModal = setInterval((function() { $(".loco-modal #loco-apis-batch").length && String($(".loco-modal").attr("style")).indexOf("none") <= -1 && ($("html").removeClass("merge-translations"), $("select#auto-api").hide(), $("#loco-apis-batch a.icon-help").hide(), $("#loco-apis-batch a.icon-group").hide(), $("#loco-apis-batch #loco-job-progress").hide(), $("select#auto-api option[value='loco_auto']").prop("selected", "selected"), $("select#auto-api").val($("select#auto-api option[value='loco_auto']").val()), $(".loco-modal .ui-dialog-titlebar .ui-dialog-title").html("Step 3 - Add Translations into Editor and Save"), $("#loco-apis-batch button.button-primary span").html("Start Adding Process"), $("#loco-apis-batch button.button-primary").on("click", (function() { $(this).find("span").html("Adding...") })), $(".loco-modal").addClass("addtranslations"), $(".noapiadded").remove(), $(".loco-modal #loco-apis-batch form").show(), $(".loco-modal #loco-apis-batch").removeClass("loco-alert"), clearInterval(checkModal)) }), 100) })) }(window, jQuery);